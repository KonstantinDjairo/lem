(defpackage :lem-tests/buffer
  (:use :cl
        :rove))
(in-package :lem-tests/buffer)

(deftest make-buffer
  (flet ((verify (name &key read-only-p
                            (enable-undo-p t)
                            (syntax-table (lem-base:fundamental-syntax-table)))
           (let ((buffer (lem-base:make-buffer name
                                               :read-only-p read-only-p
                                               :enable-undo-p enable-undo-p
                                               :syntax-table syntax-table)))
             (ok (equal name (lem-base::buffer-%name buffer)))
             (ok (equal nil (lem-base::buffer-%filename buffer)))
             (ok (null (lem-base::buffer-%directory buffer)))
             (ok (eql 0 (lem-base::buffer-%modified-p buffer)))
             (ok (eq enable-undo-p (lem-base::buffer-%enable-undo-p buffer)))
             (ok (null (lem-base::buffer-temporary-p buffer)))
             (ok (eq read-only-p (lem-base::buffer-read-only-p buffer)))
             (ok (eq syntax-table (lem-base::buffer-syntax-table buffer)))
             (ok (eq 'lem-base:fundamental-mode (lem-base::buffer-major-mode buffer)))
             (ok (null (lem-base::buffer-minor-modes buffer)))
             (let ((point (lem-base::buffer-start-point buffer)))
               (ok (and (lem-base:pointp point)
                        (= 1 (lem-base:line-number-at-point point))
                        (= 0 (lem-base:point-charpos point))
                        (eq :right-inserting (lem-base:point-kind point)))))
             (let ((point (lem-base::buffer-end-point buffer)))
               (ok (and (lem-base:pointp point)
                        (= 1 (lem-base:line-number-at-point point))
                        (= 0 (lem-base:point-charpos point))
                        (eq :left-inserting (lem-base:point-kind point)))))
             (ok (null (lem-base::buffer-mark-p buffer)))
             (ok (null (lem-base::buffer-mark buffer)))
             (let ((point (lem-base::buffer-point buffer)))
               (ok (and (lem-base:pointp point)
                        (= 1 (lem-base:line-number-at-point point))
                        (= 0 (lem-base:point-charpos point))
                        (eq :left-inserting (lem-base:point-kind point)))))
             (ok (null (lem-base::%buffer-keep-binfo buffer)))
             (let ((points (lem-base::buffer-points buffer)))
               (ok (and (= 3 (length points))
                        (not (eq (first points)
                                 (second points)))
                        (not (eq (first points)
                                 (third points)))
                        (not (eq (second points)
                                 (third points))))))
             (ok (eql 1 (lem-base::buffer-nlines buffer)))
             (ok (equalp #() (lem-base::buffer-edit-history buffer)))
             (ok (null (lem-base::buffer-redo-stack buffer)))
             (ok (null (lem-base::buffer-encoding buffer)))
             (ok (null (lem-base::buffer-last-write-date buffer)))
             (let ((hash-table (lem-base::buffer-variables buffer)))
               (ok (and (hash-table-p hash-table)
                        (= 0 (hash-table-count hash-table))
                        (eq 'equal (hash-table-test hash-table)))))
             buffer)))
    (lem-base::with-current-buffers ()
      (verify "test"))
    (testing "temporary parameter"
      (lem-base::with-current-buffers ()
        (ok (eq (lem-base:make-buffer "hoge")
                (lem-base:make-buffer "hoge")))
        (ok (not (eq (lem-base:make-buffer "hoge")
                     (lem-base:make-buffer "hoge" :temporary t))))
        (ok (not (eq (lem-base:make-buffer "piyo" :temporary t)
                     (lem-base:make-buffer "piyo" :temporary t))))))
    (testing "read-only-p parameter"
      (lem-base::with-current-buffers ()
        (verify "test" :read-only-p t)))
    (testing "enable-undo-p parameter"
      (lem-base::with-current-buffers ()
        (verify "test" :enable-undo-p nil)))
    (testing "syntax-table parameter"
      (lem-base::with-current-buffers ()
        (verify "test" :syntax-table (lem-base:make-syntax-table))))))
